// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`API Gateway returns a websocket api 1`] = `
Object {
  "Parameters": Any<Object>,
  "Resources": Object {
    "AccessLogs8B620ECA": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "RetentionInDays": 7,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "Account": Object {
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "CWRole7EC94C1E",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "Authorizer": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "AuthorizerType": "REQUEST",
        "AuthorizerUri": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":apigateway:us-east-1:lambda:path/2015-03-31/functions/",
              Object {
                "Fn::GetAtt": Array [
                  "setupconnectionauthorizerFunctionE2E31CC5",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
        "Name": "WebSocketApiAuthorizer",
      },
      "Type": "AWS::ApiGatewayV2::Authorizer",
    },
    "CWRole7EC94C1E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DEVStage3CF34D28": Object {
      "Properties": Object {
        "AccessLogSettings": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "AccessLogs8B620ECA",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp - - [$context.requestTime] \\"$context.httpMethod $context.routeKey $context.protocol\\" $context.status $context.responseLength $context.requestId",
        },
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "AutoDeploy": true,
        "DefaultRouteSettings": Object {
          "DataTraceEnabled": true,
          "LoggingLevel": "INFO",
          "ThrottlingBurstLimit": 500,
          "ThrottlingRateLimit": 1000,
        },
        "StageName": "dev",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "ExecutionLogs6FEE23C8": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/apigateway/",
              Object {
                "Ref": "WebSocketApi4showDEVD00A8EAF",
              },
              "/dev",
            ],
          ],
        },
        "RetentionInDays": 7,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "GetStateModel": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "ContentType": "application/json",
        "Name": "GetStateModel",
        "Schema": Object {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "properties": Object {
            "action": Object {
              "enum": Array [
                "getState",
              ],
            },
          },
          "required": Array [
            "action",
          ],
          "title": "GetStateSchema",
          "type": "object",
        },
      },
      "Type": "AWS::ApiGatewayV2::Model",
    },
    "WebSocketApi4showDEVD00A8EAF": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "Name": "WebSocketApi4showDEV",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "WebSocketApi4showDEVconnectRoute8E598343": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": Object {
          "Ref": "Authorizer",
        },
        "RouteKey": "$connect",
        "Target": Object {
          "Fn::Join": Array [
            "",
            Array [
              "integrations/",
              Object {
                "Ref": "WebSocketApi4showDEVconnectRouteOnConnectIntegrationF47787F4",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "WebSocketApi4showDEVconnectRouteOnConnectIntegrationF47787F4": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":apigateway:us-east-1:lambda:path/2015-03-31/functions/",
              Object {
                "Fn::GetAtt": Array [
                  "setupconnectiononConnectFunction1026145B",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "WebSocketApi4showDEVconnectRouteOnConnectIntegrationPermissionD73F152E": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "setupconnectiononConnectFunction1026145B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:us-east-1:123456789:",
              Object {
                "Ref": "WebSocketApi4showDEVD00A8EAF",
              },
              "/*/*$connect",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebSocketApi4showDEVdisconnectRouteF7E47E8F": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "RouteKey": "$disconnect",
        "Target": Object {
          "Fn::Join": Array [
            "",
            Array [
              "integrations/",
              Object {
                "Ref": "WebSocketApi4showDEVdisconnectRouteOnDisconnectIntegrationC465D215",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "WebSocketApi4showDEVdisconnectRouteOnDisconnectIntegrationC465D215": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":apigateway:us-east-1:lambda:path/2015-03-31/functions/",
              Object {
                "Fn::GetAtt": Array [
                  "setupconnectiononDisconnectFunction6260FCA7",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "WebSocketApi4showDEVdisconnectRouteOnDisconnectIntegrationPermission1684DCDB": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "setupconnectiononDisconnectFunction6260FCA7",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:us-east-1:123456789:",
              Object {
                "Ref": "WebSocketApi4showDEVD00A8EAF",
              },
              "/*/*$disconnect",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebSocketApi4showDEVgetStateRouteB60A3BB2": Object {
      "DependsOn": Array [
        "Account",
        "GetStateModel",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "ModelSelectionExpression": "$request.body.action",
        "RequestModels": Object {
          "getState": "GetStateModel",
        },
        "RouteKey": "getState",
        "Target": Object {
          "Fn::Join": Array [
            "",
            Array [
              "integrations/",
              Object {
                "Ref": "WebSocketApi4showDEVgetStateRoutegetStateIntegrationAFCF3A6B",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "WebSocketApi4showDEVgetStateRoutegetStateIntegrationAFCF3A6B": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Ref": "WebSocketApi4showDEVD00A8EAF",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":apigateway:us-east-1:lambda:path/2015-03-31/functions/",
              Object {
                "Fn::GetAtt": Array [
                  "setupconnectiongetStateFunction1D3A554F",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "WebSocketApi4showDEVgetStateRoutegetStateIntegrationPermission307899ED": Object {
      "DependsOn": Array [
        "Account",
      ],
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "setupconnectiongetStateFunction1D3A554F",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:us-east-1:123456789:",
              Object {
                "Ref": "WebSocketApi4showDEVD00A8EAF",
              },
              "/*/*getState",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "setupconnectionauthorizerFunctionAuthZPermissionA7BA042B": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "setupconnectionauthorizerFunctionE2E31CC5",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:us-east-1:123456789:",
              Object {
                "Ref": "WebSocketApi4showDEVD00A8EAF",
              },
              "/authorizers/",
              Object {
                "Ref": "Authorizer",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "setupconnectionauthorizerFunctionE2E31CC5": Object {
      "DependsOn": Array [
        "setupconnectionauthorizerFunctionServiceRoleCD1EC894",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectionauthorizerFunctionServiceRoleCD1EC894",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectionauthorizerFunctionServiceRoleCD1EC894": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "setupconnectiongetStateFunction1D3A554F": Object {
      "DependsOn": Array [
        "setupconnectiongetStateFunctionServiceRoleDefaultPolicyA2443520",
        "setupconnectiongetStateFunctionServiceRole7399EE77",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectiongetStateFunctionServiceRole7399EE77",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectiongetStateFunctionServiceRole7399EE77": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "setupconnectiongetStateFunctionServiceRoleDefaultPolicyA2443520": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "execute-api:ManageConnections",
                "cognito-idp:*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:aws:execute-api:undefined:undefined:",
                      Object {
                        "Ref": "WebSocketApi4showDEVD00A8EAF",
                      },
                      "/*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:aws:cognito-idp:undefined:undefined:",
                      Object {
                        "Ref": "usuariosdevA198FC9E",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "setupconnectiongetStateFunctionServiceRoleDefaultPolicyA2443520",
        "Roles": Array [
          Object {
            "Ref": "setupconnectiongetStateFunctionServiceRole7399EE77",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "setupconnectiononConnectFunction1026145B": Object {
      "DependsOn": Array [
        "setupconnectiononConnectFunctionServiceRole5F640ED8",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectiononConnectFunctionServiceRole5F640ED8",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectiononConnectFunctionServiceRole5F640ED8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "setupconnectiononDisconnectFunction6260FCA7": Object {
      "DependsOn": Array [
        "setupconnectiononDisconnectFunctionServiceRoleA17A7E4A",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectiononDisconnectFunctionServiceRoleA17A7E4A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectiononDisconnectFunctionServiceRoleA17A7E4A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "usuariosdevA198FC9E": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_email",
              "Priority": 1,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": false,
        },
        "AliasAttributes": Array [
          "email",
        ],
        "AutoVerifiedAttributes": Array [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "Policies": Object {
          "PasswordPolicy": Object {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
          },
        },
        "Schema": Array [
          Object {
            "Mutable": true,
            "Name": "preferred_username",
            "Required": true,
          },
          Object {
            "Mutable": true,
            "Name": "email",
            "Required": true,
          },
        ],
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolName": "USUARIOS",
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
