// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuroraDB returns a serverless aurora 1`] = `
Object {
  "Outputs": Object {
    "Bastion4showdevBastionHostId576F7FE4": Object {
      "Description": "Instance ID of the bastion host. Use this to connect via SSM Session Manager",
      "Value": Object {
        "Ref": "Bastion4showdevFCCB4240",
      },
    },
  },
  "Parameters": Any<Object>,
  "Resources": Object {
    "ApiTestStackAuroraServerlessSecretF94A4FDD3fdaad7efa858a3daf9490cf0a702aeb": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Generated by the CDK for stack: ",
              Object {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": Object {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@\\"\\\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{\\"username\\":\\"serverless\\"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "AuroraServerless1D6F3053": Object {
      "DeletionPolicy": "Snapshot",
      "Properties": Any<Object>,
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "AuroraServerlessSecretAttachment2F9C7D0C": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "ApiTestStackAuroraServerlessSecretF94A4FDD3fdaad7efa858a3daf9490cf0a702aeb",
        },
        "TargetId": Object {
          "Ref": "AuroraServerless1D6F3053",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "AuroraServerlessSecurityGroupF548A982": Object {
      "Properties": Object {
        "GroupDescription": "RDS security group",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "AuroraServerlessSecurityGroupfromApiTestStackBastion4showdevInstanceSecurityGroupDEEA0DC5IndirectPort215C5308": Object {
      "Properties": Object {
        "Description": "Bastion host connection",
        "FromPort": Object {
          "Fn::GetAtt": Array [
            "AuroraServerless1D6F3053",
            "Endpoint.Port",
          ],
        },
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "AuroraServerlessSecurityGroupF548A982",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "Bastion4showdevInstanceSecurityGroupA6EFB002",
            "GroupId",
          ],
        },
        "ToPort": Object {
          "Fn::GetAtt": Array [
            "AuroraServerless1D6F3053",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "AuroraServerlessSubnetsE15BACD9": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnets for Aurora-Serverless database",
        "SubnetIds": Array [
          Object {
            "Ref": "Stack4showVPCdevPrivateSubnet1Subnet7DBF50C2",
          },
          Object {
            "Ref": "Stack4showVPCdevPrivateSubnet2SubnetE83F9285",
          },
          Object {
            "Ref": "Stack4showVPCdevPrivateSubnet3Subnet95E9203E",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "Bastion4showdevFCCB4240": Object {
      "DependsOn": Array [
        "Bastion4showdevInstanceRoleDefaultPolicy1C167C0F",
        "Bastion4showdevInstanceRole4432A549",
      ],
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": Object {
          "Ref": "Bastion4showdevInstanceProfile0697EEF5",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.nano",
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "Bastion4showdevInstanceSecurityGroupA6EFB002",
              "GroupId",
            ],
          },
        ],
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet1Subnet7DBF50C2",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "bastion-host-4show-dev",
          },
        ],
        "UserData": Object {
          "Fn::Base64": "#!/bin/bash",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "Bastion4showdevInstanceProfile0697EEF5": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "Bastion4showdevInstanceRole4432A549",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "Bastion4showdevInstanceRole4432A549": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "bastion-host-4show-dev",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Bastion4showdevInstanceRoleDefaultPolicy1C167C0F": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ssmmessages:*",
                "ssm:UpdateInstanceInformation",
                "ec2messages:*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "Bastion4showdevInstanceRoleDefaultPolicy1C167C0F",
        "Roles": Array [
          Object {
            "Ref": "Bastion4showdevInstanceRole4432A549",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Bastion4showdevInstanceSecurityGroupA6EFB002": Object {
      "Properties": Object {
        "GroupDescription": "ApiTestStack/Bastion4showdev/Resource/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "bastion-host-4show-dev",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "Stack4showVPCdevB3350D88": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "Stack4showVPCdevIGW921FDFC2": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "Stack4showVPCdevPrivateSubnet1DefaultRoute703B12D1": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet1NATGateway7B76FC98",
        },
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet1RouteTable338B39E6",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "Stack4showVPCdevPrivateSubnet1RouteTable338B39E6": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "Stack4showVPCdevPrivateSubnet1RouteTableAssociationD947205D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet1RouteTable338B39E6",
        },
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet1Subnet7DBF50C2",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "Stack4showVPCdevPrivateSubnet1Subnet7DBF50C2": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.96.0/19",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PrivateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Stack4showVPCdevPrivateSubnet2DefaultRouteB3E34412": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet1NATGateway7B76FC98",
        },
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet2RouteTableBFEE83D2",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "Stack4showVPCdevPrivateSubnet2RouteTableAssociation48E19415": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet2RouteTableBFEE83D2",
        },
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet2SubnetE83F9285",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "Stack4showVPCdevPrivateSubnet2RouteTableBFEE83D2": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "Stack4showVPCdevPrivateSubnet2SubnetE83F9285": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.128.0/19",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PrivateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Stack4showVPCdevPrivateSubnet3DefaultRoute3515D1D6": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet1NATGateway7B76FC98",
        },
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet3RouteTable63A4AAEB",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "Stack4showVPCdevPrivateSubnet3RouteTable63A4AAEB": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PrivateSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "Stack4showVPCdevPrivateSubnet3RouteTableAssociation7397CD90": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet3RouteTable63A4AAEB",
        },
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPrivateSubnet3Subnet95E9203E",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "Stack4showVPCdevPrivateSubnet3Subnet95E9203E": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1c",
        "CidrBlock": "10.0.160.0/19",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PrivateSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Stack4showVPCdevPublicSubnet1DefaultRoute6873F953": Object {
      "DependsOn": Array [
        "Stack4showVPCdevVPCGW61557925",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "Stack4showVPCdevIGW921FDFC2",
        },
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet1RouteTable6CDFA71C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "Stack4showVPCdevPublicSubnet1EIPC6092CA1": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "Stack4showVPCdevPublicSubnet1NATGateway7B76FC98": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "Stack4showVPCdevPublicSubnet1EIPC6092CA1",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet1Subnet16805C75",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "Stack4showVPCdevPublicSubnet1RouteTable6CDFA71C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "Stack4showVPCdevPublicSubnet1RouteTableAssociationE3048979": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet1RouteTable6CDFA71C",
        },
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet1Subnet16805C75",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "Stack4showVPCdevPublicSubnet1Subnet16805C75": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/19",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Stack4showVPCdevPublicSubnet2DefaultRoute6510D5DD": Object {
      "DependsOn": Array [
        "Stack4showVPCdevVPCGW61557925",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "Stack4showVPCdevIGW921FDFC2",
        },
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet2RouteTable47DFD4E7",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "Stack4showVPCdevPublicSubnet2RouteTable47DFD4E7": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "Stack4showVPCdevPublicSubnet2RouteTableAssociationEB7227BF": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet2RouteTable47DFD4E7",
        },
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet2SubnetF1D03DFA",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "Stack4showVPCdevPublicSubnet2SubnetF1D03DFA": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.32.0/19",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Stack4showVPCdevPublicSubnet3DefaultRouteF63FC35F": Object {
      "DependsOn": Array [
        "Stack4showVPCdevVPCGW61557925",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "Stack4showVPCdevIGW921FDFC2",
        },
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet3RouteTableEBB3D228",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "Stack4showVPCdevPublicSubnet3RouteTableAssociationF4930C52": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet3RouteTableEBB3D228",
        },
        "SubnetId": Object {
          "Ref": "Stack4showVPCdevPublicSubnet3Subnet5A14E65C",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "Stack4showVPCdevPublicSubnet3RouteTableEBB3D228": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "Stack4showVPCdevPublicSubnet3Subnet5A14E65C": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1c",
        "CidrBlock": "10.0.64.0/19",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "ApiTestStack/Stack4showVPCdev/PublicSubnet3",
          },
        ],
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "Stack4showVPCdevVPCGW61557925": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "Stack4showVPCdevIGW921FDFC2",
        },
        "VpcId": Object {
          "Ref": "Stack4showVPCdevB3350D88",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "setupconnectionauthorizerFunctionE2E31CC5": Object {
      "DependsOn": Array [
        "setupconnectionauthorizerFunctionServiceRoleCD1EC894",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-123456789-us-east-1",
          "S3Key": "2cc25a39d44192700328498fed6b2956539c5e40f4d9aabb04c2a003f38c77c1.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectionauthorizerFunctionServiceRoleCD1EC894",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectionauthorizerFunctionServiceRoleCD1EC894": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "setupconnectiongetStateFunction1D3A554F": Object {
      "DependsOn": Array [
        "setupconnectiongetStateFunctionServiceRoleDefaultPolicyA2443520",
        "setupconnectiongetStateFunctionServiceRole7399EE77",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-123456789-us-east-1",
          "S3Key": "04c13d8fdf8c3e244c735b7ec51961844e2af5a5b785ad1a4417479eb891f55b.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectiongetStateFunctionServiceRole7399EE77",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectiongetStateFunctionServiceRole7399EE77": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "setupconnectiongetStateFunctionServiceRoleDefaultPolicyA2443520": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "rds-data:BatchExecuteStatement",
                "rds-data:BeginTransaction",
                "rds-data:CommitTransaction",
                "rds-data:ExecuteStatement",
                "rds-data:RollbackTransaction",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AuroraServerlessSecretAttachment2F9C7D0C",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "setupconnectiongetStateFunctionServiceRoleDefaultPolicyA2443520",
        "Roles": Array [
          Object {
            "Ref": "setupconnectiongetStateFunctionServiceRole7399EE77",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "setupconnectiononConnectFunction1026145B": Object {
      "DependsOn": Array [
        "setupconnectiononConnectFunctionServiceRole5F640ED8",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-123456789-us-east-1",
          "S3Key": "b703c0671c5db6160eb29b7ac844bbbc961c93acd9686a268a00f87de2d33371.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectiononConnectFunctionServiceRole5F640ED8",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectiononConnectFunctionServiceRole5F640ED8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "setupconnectiononDisconnectFunction6260FCA7": Object {
      "DependsOn": Array [
        "setupconnectiononDisconnectFunctionServiceRoleA17A7E4A",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "cdk-hnb659fds-assets-123456789-us-east-1",
          "S3Key": "15cac29eef2b71009eed5c287885bfc48bed414837e287873338c4d51d123930.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "secretsId": "devF7B884FF-75G7hosnKYhv",
            "stage": "dev",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "setupconnectiononDisconnectFunctionServiceRoleA17A7E4A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "setupconnectiononDisconnectFunctionServiceRoleA17A7E4A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
